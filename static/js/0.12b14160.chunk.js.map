{"version":3,"sources":["pages/covers/Cover1.tsx"],"names":["Cover1","canvasRef","useRef","contextRef","useEffect","canvas","current","maybeContext","getContext","paint","pointerX","pointerY","context","requestAnimationFrame","x","y","fillStyle","Math","sin","Date","now","beginPath","ellipse","PI","fill","onMouseMove","event","target","screenX","clientX","screenY","clientY","rect","getBoundingClientRect","clip","value","min","max","clippedX","left","width","clippedY","top","height","relativeX","relativeY","getRelativeClickPosition","undefined","window","addEventListener","onTouchMove","changedTouches","getRelativeTouchPosition","onWindowResize","innerWidth","innerHeight","removeEventListener","style","ref"],"mappings":"8FAAA,iEAEe,SAASA,IACtB,IAAMC,EAAYC,iBAA0B,MACtCC,EAAaD,mBA0EnB,OAxEAE,qBAAU,WACR,IAAMC,EAASJ,EAAUK,QACzB,GAAKD,EAAL,CACA,IAAME,EAAeF,EAAOG,WAAW,MAClCD,IACLJ,EAAWG,QAAUC,MACpB,IAEHH,qBAAU,WACR,IAAMC,EAASJ,EAAUK,QACzB,GAAKD,EAAL,CACA,IAAMI,EAAQ,SAACC,EAAkBC,GAC/B,IAAMC,EAAUT,EAAWG,QACtBM,GAELC,uBAAsB,WACpB,IAAK,IAAIC,EAAIJ,EAAW,GAAII,EAAIJ,EAAW,GAAII,IAC7C,IAAK,IAAIC,EAAIJ,EAAW,GAAII,EAAIJ,EAAW,GAAII,IAC7CH,EAAQI,UAAR,cACGF,EAAIG,KAAKC,IAAIC,KAAKC,MAAQ,KAAU,IADvC,gBAGAR,EAAQS,YAERT,EAAQU,QAAQR,EAAGC,EAAG,GAAI,GAAI,EAAG,EAAG,EAAIE,KAAKM,IAC7CX,EAAQY,WAKVC,EAAc,SAACC,GAA6B,IAAD,IAC/C,GAAKzB,EAAUK,QAAf,CAD+C,MAwErD,SACEoB,EACAC,GAEA,IAAMC,EAAUF,EAAMG,QAChBC,EAAUJ,EAAMK,QAChBC,EAAOL,EAAOM,wBAEdC,EAAO,SAACC,EAAeC,EAAaC,GAA7B,OACXpB,KAAKmB,IAAIC,EAAKpB,KAAKoB,IAAIF,EAAOC,KAE1BE,EAAWJ,EAAKN,EAAUI,EAAKO,KAAM,EAAGP,EAAKQ,MAAQ,GACrDC,EAAWP,EAAKJ,EAAUE,EAAKU,IAAK,EAAGV,EAAKW,OAAS,GAErDC,EAAYN,EAAWN,EAAKQ,MAC5BK,EAAYJ,EAAWT,EAAKW,OAClC,MAAO,CAAEC,UAAWA,EAAWC,UAAWA,GAtFLC,CAC/BpB,EACAzB,EAAUK,SAFJsC,EAFuC,EAEvCA,UAAWC,EAF4B,EAE5BA,UAKb/B,EAAI8B,GAAS,UAAG3C,EAAUK,eAAb,aAAG,EAAmBkC,OACnCzB,EAAI8B,GAAS,UAAG5C,EAAUK,eAAb,aAAG,EAAmBqC,aAC/BI,IAANjC,QAAyBiC,IAANhC,GACrBN,EAAMK,EAAGC,KAGbiC,OAAOC,iBAAiB,YAAaxB,GAErC,IAAMyB,EAAc,SAACxB,GACnB,GAAKzB,EAAUK,QAAf,CAD+C,MAsCrD,SACEoB,EACAC,GAEA,IAAMC,EAAUF,EAAMyB,eAAe,GAAGtB,QAClCC,EAAUJ,EAAMyB,eAAe,GAAGpB,QAClCC,EAAOL,EAAOM,wBAEdC,EAAO,SAACC,EAAeC,EAAaC,GAA7B,OACXpB,KAAKmB,IAAIC,EAAKpB,KAAKoB,IAAIF,EAAOC,KAE1BE,EAAWJ,EAAKN,EAAUI,EAAKO,KAAM,EAAGP,EAAKQ,MAAQ,GACrDC,EAAWP,EAAKJ,EAAUE,EAAKU,IAAK,EAAGV,EAAKW,OAAS,GAErDC,EAAYN,EAAWN,EAAKQ,MAC5BK,EAAYJ,EAAWT,EAAKW,OAClC,MAAO,CAAEC,UAAWA,EAAWC,UAAWA,GApDLO,CAC/B1B,EACAzB,EAAUK,SAFJsC,EAFuC,EAEvCA,UAAWC,EAF4B,EAE5BA,UAKb/B,EAAI8B,EAAY3C,EAAUK,QAAQkC,MAClCzB,EAAI8B,EAAY5C,EAAUK,QAAQqC,YAC9BI,IAANjC,QAAyBiC,IAANhC,GACrBN,EAAMK,EAAGC,KAGbiC,OAAOC,iBAAiB,YAAaC,GAErC,IAAMG,EAAiB,WACrBhD,EAAOmC,MAAQQ,OAAOM,WACtBjD,EAAOsC,OAASK,OAAOO,aAIzB,OAFAP,OAAOC,iBAAiB,SAAUI,GAE3B,WACLL,OAAOQ,oBAAoB,YAAaN,GACxCF,OAAOQ,oBAAoB,YAAa/B,GACxCuB,OAAOQ,oBAAoB,SAAUH,OAEtC,IAGD,wBACEI,MAAO,CAAEjB,MAAO,OAAQG,OAAQ,QAChCH,MAAOQ,OAAOM,WACdX,OAAQK,OAAOO,YACfG,IAAKzD","file":"static/js/0.12b14160.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport default function Cover1() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const contextRef = useRef<CanvasRenderingContext2D>();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const maybeContext = canvas.getContext(\"2d\");\n    if (!maybeContext) return;\n    contextRef.current = maybeContext;\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const paint = (pointerX: number, pointerY: number) => {\n      const context = contextRef.current;\n      if (!context) return;\n\n      requestAnimationFrame(() => {\n        for (let x = pointerX - 10; x < pointerX + 10; x++) {\n          for (let y = pointerY - 10; y < pointerY + 10; y++) {\n            context.fillStyle = `hsl(${\n              (x * Math.sin(Date.now() / 10000)) % 255\n            }, 100%, 50%)`;\n            context.beginPath();\n\n            context.ellipse(x, y, 10, 10, 0, 0, 2 * Math.PI);\n            context.fill();\n          }\n        }\n      });\n    };\n    const onMouseMove = (event: MouseEvent): void => {\n      if (!canvasRef.current) return;\n      const { relativeX, relativeY } = getRelativeClickPosition(\n        event,\n        canvasRef.current\n      );\n\n      const x = relativeX * canvasRef.current?.width;\n      const y = relativeY * canvasRef.current?.height;\n      if (x !== undefined && y !== undefined) {\n        paint(x, y);\n      }\n    };\n    window.addEventListener(\"mousemove\", onMouseMove);\n\n    const onTouchMove = (event: TouchEvent): void => {\n      if (!canvasRef.current) return;\n      const { relativeX, relativeY } = getRelativeTouchPosition(\n        event,\n        canvasRef.current\n      );\n\n      const x = relativeX * canvasRef.current.width;\n      const y = relativeY * canvasRef.current.height;\n      if (x !== undefined && y !== undefined) {\n        paint(x, y);\n      }\n    };\n    window.addEventListener(\"touchmove\", onTouchMove);\n\n    const onWindowResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener(\"resize\", onWindowResize);\n\n    return () => {\n      window.removeEventListener(\"touchmove\", onTouchMove);\n      window.removeEventListener(\"mousemove\", onMouseMove);\n      window.removeEventListener(\"resize\", onWindowResize);\n    };\n  }, []);\n\n  return (\n    <canvas\n      style={{ width: \"100%\", height: \"100%\" }}\n      width={window.innerWidth}\n      height={window.innerHeight}\n      ref={canvasRef}\n    ></canvas>\n  );\n}\n\nfunction getRelativeTouchPosition(\n  event: TouchEvent,\n  target: HTMLCanvasElement\n): { relativeX: number; relativeY: number } {\n  const screenX = event.changedTouches[0].clientX;\n  const screenY = event.changedTouches[0].clientY;\n  const rect = target.getBoundingClientRect();\n\n  const clip = (value: number, min: number, max: number) =>\n    Math.min(max, Math.max(value, min));\n\n  const clippedX = clip(screenX - rect.left, 0, rect.width - 1);\n  const clippedY = clip(screenY - rect.top, 0, rect.height - 1);\n\n  const relativeX = clippedX / rect.width;\n  const relativeY = clippedY / rect.height;\n  return { relativeX: relativeX, relativeY: relativeY };\n}\n\nfunction getRelativeClickPosition(\n  event: MouseEvent,\n  target: HTMLCanvasElement\n): { relativeX: number; relativeY: number } {\n  const screenX = event.clientX;\n  const screenY = event.clientY;\n  const rect = target.getBoundingClientRect();\n\n  const clip = (value: number, min: number, max: number) =>\n    Math.min(max, Math.max(value, min));\n\n  const clippedX = clip(screenX - rect.left, 0, rect.width - 1);\n  const clippedY = clip(screenY - rect.top, 0, rect.height - 1);\n\n  const relativeX = clippedX / rect.width;\n  const relativeY = clippedY / rect.height;\n  return { relativeX: relativeX, relativeY: relativeY };\n}\n"],"sourceRoot":""}