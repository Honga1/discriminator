{"version":3,"sources":["chapters/chapter3/Cover3.tsx"],"names":["Cover3","hasFirstPrediction","useHasFirstPrediction","useEffect","store","setState","isCameraEnabled","useState","maskType","setMaskType","webcam","useStore","state","webcamHTMLElement","aspect","webcamAspect","style","position","width","height","onClick","type","orthographic","undefined","targetAspect","track","padding","top","boxSizing","textAlign","color","size","textShadow"],"mappings":"+OAUe,SAASA,IACtB,IAAMC,EAAqBC,cAC3BC,qBAAU,WACRC,IAAMC,SAAS,CAAEC,iBAAiB,MACjC,IAEH,MAAgCC,mBAAoC,OAApE,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAASC,aAAS,SAACC,GAAD,OAAWA,EAAMC,qBACnCC,EAASH,aAAS,SAACC,GAAD,OAAWA,EAAMG,gBAEzC,OACE,qBACEC,MAAO,CACLC,SAAU,WACVC,MAAO,OACPC,OAAQ,QAEVC,QAAS,kBACPX,GAAY,SAACY,GAAD,MACD,UAATA,EAAmB,QAAmB,UAATA,EAAmB,MAAQ,YAR9D,SAYE,sBAAKL,MAAO,CAAEC,SAAU,WAAYC,MAAO,OAAQC,OAAQ,QAA3D,UACE,eAAC,IAAD,CACEH,MAAO,CACLC,SAAU,WACVC,MAAO,OACPC,OAAQ,QAEVG,cAAc,EANhB,UAQE,cAAC,IAAD,IACCrB,QAAiCsB,IAAXT,GACrB,qCACE,cAAC,IAAD,CAAaU,aAAcV,EAA3B,SACE,cAAC,IAAD,CAAMW,MAAM,SAASjB,SAAUA,EAAUE,OAAQA,MAEnD,cAAC,IAAD,CAAcc,aAAcV,UAIlC,qBACEE,MAAO,CACLC,SAAU,WACVC,MAAO,OACPQ,QAAS,OACTC,IAAK,EACLC,UAAW,aACXC,UAAW,UAPf,SAUE,cAAC,IAAD,CACEC,MAAM,SACNC,KAAK,OACLf,MAAO,CACLgB,WAAW,mCAJf","file":"static/js/12.df1833eb.chunk.js","sourcesContent":["import { Canvas } from \"@react-three/fiber\";\nimport { Text } from \"grommet\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHasFirstPrediction } from \"src/hooks/useHasFirstPrediction\";\nimport { store, useStore } from \"src/store/store\";\nimport { Mask } from \"../chapter2/part1/Mask\";\nimport { RainbowVomit } from \"../chapter2/part1/RainbowVomit\";\nimport { StaticBackground } from \"../chapter2/part1/StaticBackground\";\nimport { WorldOffset } from \"../chapter2/part1/WorldOffset\";\n\nexport default function Cover3() {\n  const hasFirstPrediction = useHasFirstPrediction();\n  useEffect(() => {\n    store.setState({ isCameraEnabled: true });\n  }, []);\n\n  const [maskType, setMaskType] = useState<\"video\" | \"brett\" | \"own\">(\"own\");\n  const webcam = useStore((state) => state.webcamHTMLElement);\n  const aspect = useStore((state) => state.webcamAspect);\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n      }}\n      onClick={() =>\n        setMaskType((type) =>\n          type === \"video\" ? \"brett\" : type === \"brett\" ? \"own\" : \"video\"\n        )\n      }\n    >\n      <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n        <Canvas\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n          }}\n          orthographic={false}\n        >\n          <StaticBackground></StaticBackground>\n          {hasFirstPrediction && aspect !== undefined && (\n            <>\n              <WorldOffset targetAspect={aspect}>\n                <Mask track=\"center\" maskType={maskType} webcam={webcam}></Mask>\n              </WorldOffset>\n              <RainbowVomit targetAspect={aspect} />\n            </>\n          )}\n        </Canvas>\n        <div\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            padding: \"58px\",\n            top: 0,\n            boxSizing: \"border-box\",\n            textAlign: \"center\",\n          }}\n        >\n          <Text\n            color=\"yellow\"\n            size=\"32px\"\n            style={{\n              textShadow: `0px 4px 4px rgba(0, 0, 0, 0.25)`,\n            }}\n          >\n            Tap the screen to change your mask\n          </Text>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}