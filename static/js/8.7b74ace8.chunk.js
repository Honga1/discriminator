(this.webpackJsonpdisc=this.webpackJsonpdisc||[]).push([[8],{392:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(6),i=n(216),a=n(29);function c(){var e=Object(r.useRef)([]),t=Object(a.b)((function(e){return e.webcamHTMLElement}));return Object(r.useEffect)((function(){return i.a.subscribe(t,(function(t){e.current=t}))}),[t]),e}},395:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(11),i=n(6),a=n(216),c=n(392),u=function(){Object(c.a)();var e=Object(i.useState)(a.a.hasFirstFace.get()),t=Object(r.a)(e,2),n=t[0],u=t[1];return Object(i.useEffect)((function(){return a.a.hasFirstFace.subscribe((function(){u(!0)}))})),n}},411:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return f}));var r=n(11),i=n(114),a=n(394),c=n(375),u=n(6),o=n(392),s=n(29),v=n(45),l=n(395),m=n(5);function f(){Object(u.useEffect)((function(){s.a.setState({isCameraEnabled:!0})}),[]);var e=Object(u.useState)(0),t=Object(r.a)(e,2),n=t[0],o=t[1],v=Object(l.a)();Object(u.useEffect)((function(){if(o(0),v){var e=setTimeout((function(){return o(1)}),5e3),t=setTimeout((function(){return o(2)}),1e4);return function(){clearTimeout(e),clearTimeout(t)}}}),[v]);var f=Object(i.useSpring)((function(){return{amount:1===n||2===n?1:0,config:{duration:5e3}}}),[n]),d=Object(r.a)(f,1)[0].amount;return Object(m.jsx)("div",{style:{position:"absolute",width:"100%",height:"100%"},children:Object(m.jsxs)("div",{style:{position:"relative",width:"100%",height:"100%"},children:[Object(m.jsx)(a.a,{orthographic:!0,children:Object(m.jsx)(x,{amount:d})}),Object(m.jsx)("div",{style:{position:"absolute",width:"100%",padding:"58px",top:0,boxSizing:"border-box",textAlign:"center"},children:Object(m.jsxs)(c.a,{color:"yellow",size:"32px",style:{textShadow:"0px 4px 4px rgba(0, 0, 0, 0.25)"},children:[0===n&&"You don't look happy :(",1===n&&"Let's see what we can do to fix that.",2===n&&"There, much better!"]})})]})})}function x(e){var t=e.amount,n=Object(s.b)((function(e){return e.webcamHTMLElement})),r=Object(s.b)((function(e){return e.webcamAspect})),i=Object(a.c)((function(e){return e.viewport})),c=Object(u.useRef)(),l=Math.min(i.width,i.height*r),f=Math.min(i.width/r,i.height),x=Object(u.useMemo)((function(){return new v.VideoTexture(n)}),[n]),y=Object(o.a)();return function(e,t){var n=[61,185,40,39,37,0,267,269,270,409,291,146,91,181,84,17,314,405,321,375,291];Object(a.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=d(n,a),u=c.xMin,o=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.mouth.value.x=u,t.current.material.uniforms.mouth.value.y=o+1,t.current.material.uniforms.mouth.value.z=s,t.current.material.uniforms.mouth.value.w=v+1)}}))}(y,c),function(e,t){var n=[225,228,189,128];Object(a.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=d(n,a),u=c.xMin,o=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.leftEye.value.x=u,t.current.material.uniforms.leftEye.value.y=o+1,t.current.material.uniforms.leftEye.value.z=s,t.current.material.uniforms.leftEye.value.w=v+1)}}))}(y,c),function(e,t){var n=[445,448,413,357];Object(a.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=d(n,a),u=c.xMin,o=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.rightEye.value.x=u,t.current.material.uniforms.rightEye.value.y=o+1,t.current.material.uniforms.rightEye.value.z=s,t.current.material.uniforms.rightEye.value.w=v+1)}}))}(y,c),function(e,t){var n=[473,474,475,476,477];Object(a.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=d(n,a),u=c.xMin,o=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.leftIris.value.x=u,t.current.material.uniforms.leftIris.value.y=o+1,t.current.material.uniforms.leftIris.value.z=s,t.current.material.uniforms.leftIris.value.w=v+1)}}))}(y,c),function(e,t){var n=[468,469,470,471,472];Object(a.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=d(n,a),u=c.xMin,o=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.rightIris.value.x=u,t.current.material.uniforms.rightIris.value.y=o+1,t.current.material.uniforms.rightIris.value.z=s,t.current.material.uniforms.rightIris.value.w=v+1)}}))}(y,c),Object(a.b)((function(){c.current&&(c.current.material.uniforms.amount.value=t.get())})),Object(m.jsx)("group",{scale:[l,f,1],children:Object(m.jsxs)("mesh",{ref:c,children:[Object(m.jsx)("planeBufferGeometry",{}),Object(m.jsx)("primitive",{object:h,attach:"material","uniforms-map-value":x,"uniforms-mouth-value":new v.Vector4(.5,.5,.5,.5),"uniforms-leftEye-value":new v.Vector4(.5,.5,.5,.5),"uniforms-rightEye-value":new v.Vector4(.5,.5,.5,.5),"uniforms-rightIris-value":new v.Vector4(.5,.5,.5,.5),"uniforms-leftIris-value":new v.Vector4(.5,.5,.5,.5),"uniforms-amount-value":0})]})})}function d(e,t){var n=1/0,i=-1/0,a=-1/0,c=1/0;return e.forEach((function(e){var u=t[e],o=Object(r.a)(u,2),s=o[0],v=o[1];n=Math.min(n,s),i=Math.max(i,s),c=Math.min(c,v),a=Math.max(a,v)})),{xMin:n,yMax:a,xMax:i,yMin:c}}var h=new v.ShaderMaterial({fragmentShader:"\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec4 mouth;\nuniform vec4 leftEye;\nuniform vec4 rightEye;\nuniform vec4 leftIris;\nuniform vec4 rightIris;\nuniform float amount;\n\nvec4 desaturate(vec3 color, float factor)\n{\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\n\tvec3 gray = vec3(dot(lum, color));\n\treturn vec4(mix(color, gray, factor), 1.0);\n}\n\nstruct Result {\n  vec2 uv;\n  float mixDistance;\n};\n\nResult getSmile() {\n  vec2 topLeft = mouth.xy;\n  vec2 bottomRight = mouth.zw;\n  vec2 fromTopLeft = vUv - topLeft;\n  vec2 distance = bottomRight - topLeft;\n  vec2 relativeDistance = fromTopLeft / distance;\n  float distanceXFromCenter = abs((relativeDistance.x - 0.5)*2.0);\n\n  float mixDistance = clamp(length((relativeDistance - 0.5)*vec2(1.2, 0.4)), 0.0, 1.0);\n\n  vec2 center = (topLeft + bottomRight) / 2.0;\n  vec2 distanceFromCenterLine = (center - vUv)/distance;\n\n  float y = vUv.y - pow(abs(distanceFromCenterLine.x) /3.0, 2.5) * (1.2 - (vUv.y - topLeft.y)/distance.y) * 5.0;\n  float x = vUv.x + distanceFromCenterLine.x*distance.x * 0.5;\n\n\n  Result result;\n\n  result.uv = vec2(x, y);\n  result.mixDistance = 1.0 - mixDistance;\n\n  return result;\n}\n\nResult getLeftEye() {\n  vec2 leftIrisCenter = (leftIris.xy + leftIris.zw)/2.0;\n  vec2 topLeft = leftEye.xy;\n  vec2 bottomRight = leftEye.zw;\n  vec2 fromTopLeft = vUv - topLeft;\n  vec2 distance = bottomRight - topLeft;\n  vec2 relativeDistance = fromTopLeft / distance;\n  float distanceXFromCenter = abs((relativeDistance.x - 0.5)*2.0);\n\n  float mixDistance = clamp(length((relativeDistance - 0.5)*vec2(1.0, 0.7)), 0.0, 1.0);\n\n  vec2 center = leftIrisCenter;\n  vec2 distanceFromCenterLine = (center - vUv)/distance;\n  float y = vUv.y + distanceFromCenterLine.y*distance.y;\n  float x = vUv.x + distanceFromCenterLine.x*distance.x;\n\n  Result result;\n\n  result.uv = vec2(x, y);\n  result.mixDistance = 1.0 - mixDistance;\n\n  return result;\n}\n\n\nResult getRightEye() {\n  vec2 rightIrisCenter = (rightIris.xy + rightIris.zw)/2.0;\n\n  vec2 topLeft = rightEye.xy;\n  vec2 bottomRight = rightEye.zw;\n  vec2 fromTopLeft = vUv - topLeft;\n  vec2 distance = bottomRight - topLeft;\n  vec2 relativeDistance = fromTopLeft / distance;\n  float distanceXFromCenter = abs((relativeDistance.x - 0.5)*2.0);\n\n  float mixDistance = clamp(length((relativeDistance - 0.5)*vec2(1.0, 0.7)), 0.0, 1.0);\n\n  vec2 center = rightIrisCenter;\n  vec2 distanceFromCenterLine = (center - vUv)/distance;\n  float y = vUv.y + distanceFromCenterLine.y*distance.y;\n  float x = vUv.x + distanceFromCenterLine.x*distance.x;\n\n  Result result;\n\n  result.uv = vec2(x, y);\n  result.mixDistance = 1.0 - mixDistance;\n\n  return result;\n}\n\n\nvoid main() {\n    Result smile = getSmile();\n    Result leftEyeKawaii = getLeftEye();\n    Result rightEyeKawaii = getRightEye();\n    vec2 uv = mix(vUv, smile.uv, smile.mixDistance * amount);\n    uv = mix(uv, leftEyeKawaii.uv, leftEyeKawaii.mixDistance * amount);\n    uv = mix(uv, rightEyeKawaii.uv, rightEyeKawaii.mixDistance * amount);\n    vec4 texelColor = texture2D( map, uv );\n    gl_FragColor = desaturate(texelColor.rgb, 1.0 - amount);\n}\n",vertexShader:"\nvarying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec3 transformed = vec3( position );\n  vUv = uv.xy;\n  vec4 mvPosition = vec4( transformed, 1.0 );\n  mvPosition = modelViewMatrix * mvPosition;\n  gl_Position = projectionMatrix * mvPosition;\n\n}\n",transparent:!0,uniforms:{map:{value:void 0},mouth:{value:void 0},leftEye:{value:void 0},rightEye:{value:void 0},leftIris:{value:void 0},rightIris:{value:void 0},amount:{value:void 0}}})}}]);
//# sourceMappingURL=8.7b74ace8.chunk.js.map