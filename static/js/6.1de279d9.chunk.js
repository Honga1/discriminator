(this.webpackJsonpdisc=this.webpackJsonpdisc||[]).push([[6],{204:function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var r=n(1),i=n(16),a=n.n(i),c=n(25),o=n(13),u=n(77),s=n(72),v=n(156),l=n(357),m=(n(356),n(75)),f=n(192);var d=function e(){Object(v.a)(this,e)};function b(e){var t=e[10],n=e[152],r=e[12],i=e[15],a=Object(u.a)(f.Vector3,Object(s.a)(t)).distanceTo(Object(u.a)(f.Vector3,Object(s.a)(n))),c=Object(u.a)(f.Vector3,Object(s.a)(r)).distanceTo(Object(u.a)(f.Vector3,Object(s.a)(i)));return Object(m.a)((c/a-.03)/.15,0,1)}function h(e){var t=e[159],n=e[145],r=e[33],i=e[133],a=e[386],c=e[374],o=e[362],v=e[263],l=Object(u.a)(f.Vector3,Object(s.a)(r)).distanceTo(Object(u.a)(f.Vector3,Object(s.a)(i))),d=Object(u.a)(f.Vector3,Object(s.a)(o)).distanceTo(Object(u.a)(f.Vector3,Object(s.a)(v))),b=Object(u.a)(f.Vector3,Object(s.a)(n)).distanceTo(Object(u.a)(f.Vector3,Object(s.a)(t))),h=Object(u.a)(f.Vector3,Object(s.a)(c)).distanceTo(Object(u.a)(f.Vector3,Object(s.a)(a))),x=Object(m.a)(b/(2*l),0,1),g=Object(m.a)(h/(2*d),0,1);return x>.11&&g>.11}function x(e,t){return e.scaledMesh.map((function(e){var n=Object(o.a)(e,3),r=n[0],i=n[1],a=n[2];return[r/t.videoWidth,-i/t.videoHeight,-a/t.videoWidth]}))}function g(e,t){var n=t.videoWidth/t.videoHeight;return t.videoHeight>t.videoWidth?e.mesh.map((function(e){var t=Object(o.a)(e,3),r=t[0],i=t[1],a=t[2];return[r/192,-i/192*n,-a/192]})):e.mesh.map((function(e){var t=Object(o.a)(e,3),r=t[0],i=t[1],a=t[2];return[(r-96)/192/n+.5,-i/192,-a/192]}))}function p(e,t){return{topLeft:[e.boundingBox.topLeft[0]/t.videoWidth,-e.boundingBox.topLeft[1]/t.videoHeight],bottomRight:[e.boundingBox.bottomRight[0]/t.videoWidth,-e.boundingBox.bottomRight[1]/t.videoHeight]}}function j(e){var t=function(e){var t=new f.Vector3(e[151][0],e[151][1],e[151][2]),n=new f.Vector3(e[285][0],e[285][1],e[285][2]),r=new f.Vector3(e[55][0],e[55][1],e[55][2]),i=(new f.Vector3).subVectors(t,n),a=(new f.Vector3).subVectors(t,r);return(new f.Vector3).crossVectors(a,i).normalize()}(e),n=function(e){var t=Object(u.a)(f.Vector3,Object(s.a)(e[4])),n=Object(u.a)(f.Vector3,Object(s.a)(e[10])),r=Object(u.a)(f.Vector3,Object(s.a)(e[152])),i=(new f.Vector3).subVectors(t,n),a=(new f.Vector3).subVectors(t,r);return(new f.Vector3).crossVectors(i,a).normalize()}(e);return{up:function(e){return Object(u.a)(f.Vector3,Object(s.a)(e[199])).sub(Object(u.a)(f.Vector3,Object(s.a)(e[9]))).normalize()}(e),forward:t,left:n}}d.predictions=function(e){var t=new Set,n=e,r=function(e){t.delete(e)};return{get:function(){return n},set:function(e){n!==e&&(n=e,t.forEach((function(e){return e(n)})))},subscribe:function(e){return t.add(e),function(){return r(e)}},listeners:t}}([]),d.modelPromise=void 0,d.webcam=void 0,d.isUpdating=!1,d.update=Object(c.a)(a.a.mark((function e(){var t,n,r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(d.isUpdating=!1,0!==d.predictions.listeners.size){e.next=3;break}return e.abrupt("return");case 3:if(void 0===d.modelPromise&&(console.log("Loading model"),d.modelPromise=l.b(l.a.mediapipeFacemesh,{shouldLoadIrisModel:!0,maxFaces:1}),console.log("Loaded model")),void 0!==d.webcam){e.next=6;break}return e.abrupt("return");case 6:if(t=d.webcam,d.isUpdating=!0,!(t.readyState<HTMLMediaElement.HAVE_METADATA)){e.next=10;break}return e.abrupt("return",requestAnimationFrame(d.update));case 10:return e.next=12,d.modelPromise;case 12:return e.next=14,e.sent.estimateFaces({input:t,returnTensors:!1,flipHorizontal:!1,predictIrises:!0});case 14:n=e.sent,r=n.map((function(e){var n=x(e,t),r=g(e,t);return{scaledMesh:n,boundingBox:p(e,t),orthoVectors:j(r),mouthOpened:b(r),mesh:r,eyesOpened:h(r)}})),d.predictions.set(r),requestAnimationFrame(d.update);case 18:case"end":return e.stop()}}),e)}))),d.subscribe=function(e,t){var n=d.predictions.subscribe(t);return console.log("Added subscriber, have ".concat(d.predictions.listeners.size," listeners")),d.webcam=e,d.isUpdating||d.update(),function(){return console.log("Removing subscriber"),n()}},d.get=d.predictions.get;var y=n(4);function O(){var e=Object(r.useRef)([]),t=Object(y.b)((function(e){return e.webcamHTMLElement}));return Object(r.useEffect)((function(){return d.subscribe(t,(function(t){e.current=t}))}),[t]),e}},286:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));n(1);var r=n(194),i=n(0),a=function(e){var t,n=e.children,a=e.targetAspect,c=Object(r.c)().viewport;return t=c.aspect<a?[c.height,c.height/a,1]:[c.height*a,c.height,1],Object(i.jsx)("group",{scale:t,position:[-t[0]/2,t[1]/2,0],children:n})}},290:function(e,t){},291:function(e,t){},335:function(e,t){},412:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return l}));var r=n(13),i=n(194),a=n(1),c=n(204),o=n(192),u=n(4),s=n(286),v=n(0);function l(){var e=Object(u.b)((function(e){return e.webcamAspect}));return Object(v.jsx)("div",{style:{position:"absolute",width:"100%",height:"100%"},children:Object(v.jsxs)(i.a,{orthographic:!0,children:[Object(v.jsx)(m,{}),Object(v.jsx)(s.a,{targetAspect:e})]})})}function m(){var e=Object(u.b)((function(e){return e.webcamHTMLElement})),t=Object(u.b)((function(e){return e.webcamAspect})),n=Object(i.c)((function(e){return e.viewport})),r=Object(a.useRef)(),s=Math.min(n.width,n.height*t),l=Math.min(n.width/t,n.height),m=Object(a.useMemo)((function(){return new o.VideoTexture(e)}),[e]),b=Object(c.a)();return function(e,t){var n=[61,185,40,39,37,0,267,269,270,409,291,146,91,181,84,17,314,405,321,375,291];Object(i.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=f(n,a),o=c.xMin,u=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.mouth.value.x=o,t.current.material.uniforms.mouth.value.y=u+1,t.current.material.uniforms.mouth.value.z=s,t.current.material.uniforms.mouth.value.w=v+1)}}))}(b,r),function(e,t){var n=[225,228,189,128];Object(i.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=f(n,a),o=c.xMin,u=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.leftEye.value.x=o,t.current.material.uniforms.leftEye.value.y=u+1,t.current.material.uniforms.leftEye.value.z=s,t.current.material.uniforms.leftEye.value.w=v+1)}}))}(b,r),function(e,t){var n=[445,448,413,357];Object(i.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=f(n,a),o=c.xMin,u=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.rightEye.value.x=o,t.current.material.uniforms.rightEye.value.y=u+1,t.current.material.uniforms.rightEye.value.z=s,t.current.material.uniforms.rightEye.value.w=v+1)}}))}(b,r),function(e,t){var n=[473,474,475,476,477];Object(i.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=f(n,a),o=c.xMin,u=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.leftIris.value.x=o,t.current.material.uniforms.leftIris.value.y=u+1,t.current.material.uniforms.leftIris.value.z=s,t.current.material.uniforms.leftIris.value.w=v+1)}}))}(b,r),function(e,t){var n=[468,469,470,471,472];Object(i.b)((function(){var r,i=e.current[0];if(i){var a=i.scaledMesh,c=f(n,a),o=c.xMin,u=c.yMax,s=c.xMax,v=c.yMin;void 0!==(null===(r=t.current)||void 0===r?void 0:r.material)&&(t.current.material.uniforms.rightIris.value.x=o,t.current.material.uniforms.rightIris.value.y=u+1,t.current.material.uniforms.rightIris.value.z=s,t.current.material.uniforms.rightIris.value.w=v+1)}}))}(b,r),Object(v.jsx)("group",{scale:[s,l,1],children:Object(v.jsxs)("mesh",{ref:r,children:[Object(v.jsx)("planeBufferGeometry",{}),Object(v.jsx)("primitive",{object:d,attach:"material","uniforms-map-value":m,"uniforms-mouth-value":new o.Vector4(.5,.5,.5,.5),"uniforms-leftEye-value":new o.Vector4(.5,.5,.5,.5),"uniforms-rightEye-value":new o.Vector4(.5,.5,.5,.5),"uniforms-rightIris-value":new o.Vector4(.5,.5,.5,.5),"uniforms-leftIris-value":new o.Vector4(.5,.5,.5,.5)})]})})}function f(e,t){var n=1/0,i=-1/0,a=-1/0,c=1/0;return e.forEach((function(e){var o=t[e],u=Object(r.a)(o,2),s=u[0],v=u[1];n=Math.min(n,s),i=Math.max(i,s),c=Math.min(c,v),a=Math.max(a,v)})),{xMin:n,yMax:a,xMax:i,yMin:c}}var d=new o.ShaderMaterial({fragmentShader:"\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec4 mouth;\nuniform vec4 leftEye;\nuniform vec4 rightEye;\nuniform vec4 leftIris;\nuniform vec4 rightIris;\n\n\nstruct Result {\n  vec2 uv;\n  float mixDistance;\n};\n\nResult getSmile() {\n  vec2 topLeft = mouth.xy;\n  vec2 bottomRight = mouth.zw;\n  vec2 fromTopLeft = vUv - topLeft;\n  vec2 distance = bottomRight - topLeft;\n  vec2 relativeDistance = fromTopLeft / distance;\n  float distanceXFromCenter = abs((relativeDistance.x - 0.5)*2.0);\n\n  float mixDistance = clamp(length((relativeDistance - 0.5)*vec2(1.2, 0.4)), 0.0, 1.0);\n\n  vec2 center = (topLeft + bottomRight) / 2.0;\n  vec2 distanceFromCenterLine = (center - vUv)/distance;\n\n  float y = vUv.y - pow(abs(distanceFromCenterLine.x) /3.0, 2.5) * (1.2 - (vUv.y - topLeft.y)/distance.y) * 5.0;\n  float x = vUv.x + distanceFromCenterLine.x*distance.x * 0.5;\n\n\n  Result result;\n\n  result.uv = vec2(x, y);\n  result.mixDistance = 1.0 - mixDistance;\n\n  return result;\n}\n\nResult getLeftEye() {\n  vec2 leftIrisCenter = (leftIris.xy + leftIris.zw)/2.0;\n  vec2 topLeft = leftEye.xy;\n  vec2 bottomRight = leftEye.zw;\n  vec2 fromTopLeft = vUv - topLeft;\n  vec2 distance = bottomRight - topLeft;\n  vec2 relativeDistance = fromTopLeft / distance;\n  float distanceXFromCenter = abs((relativeDistance.x - 0.5)*2.0);\n\n  float mixDistance = clamp(length((relativeDistance - 0.5)*vec2(1.0, 0.7)), 0.0, 1.0);\n\n  vec2 center = leftIrisCenter;\n  vec2 distanceFromCenterLine = (center - vUv)/distance;\n  float y = vUv.y + distanceFromCenterLine.y*distance.y;\n  float x = vUv.x + distanceFromCenterLine.x*distance.x;\n\n  Result result;\n\n  result.uv = vec2(x, y);\n  result.mixDistance = 1.0 - mixDistance;\n\n  return result;\n}\n\n\nResult getRightEye() {\n  vec2 rightIrisCenter = (rightIris.xy + rightIris.zw)/2.0;\n\n  vec2 topLeft = rightEye.xy;\n  vec2 bottomRight = rightEye.zw;\n  vec2 fromTopLeft = vUv - topLeft;\n  vec2 distance = bottomRight - topLeft;\n  vec2 relativeDistance = fromTopLeft / distance;\n  float distanceXFromCenter = abs((relativeDistance.x - 0.5)*2.0);\n\n  float mixDistance = clamp(length((relativeDistance - 0.5)*vec2(1.0, 0.7)), 0.0, 1.0);\n\n  vec2 center = rightIrisCenter;\n  vec2 distanceFromCenterLine = (center - vUv)/distance;\n  float y = vUv.y + distanceFromCenterLine.y*distance.y;\n  float x = vUv.x + distanceFromCenterLine.x*distance.x;\n\n  Result result;\n\n  result.uv = vec2(x, y);\n  result.mixDistance = 1.0 - mixDistance;\n\n  return result;\n}\n\n\nvoid main() {\n    Result smile = getSmile();\n    Result leftEyeKawaii = getLeftEye();\n    Result rightEyeKawaii = getRightEye();\n    vec2 uv = mix(vUv, smile.uv, smile.mixDistance);\n    uv = mix(uv, leftEyeKawaii.uv, leftEyeKawaii.mixDistance);\n    uv = mix(uv, rightEyeKawaii.uv, rightEyeKawaii.mixDistance);\n    vec4 texelColor = texture2D( map, uv );\n    gl_FragColor = vec4(texelColor.rgb, 1.0);\n}\n",vertexShader:"\nvarying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec3 transformed = vec3( position );\n  vUv = uv.xy;\n  vec4 mvPosition = vec4( transformed, 1.0 );\n  mvPosition = modelViewMatrix * mvPosition;\n  gl_Position = projectionMatrix * mvPosition;\n\n}\n",transparent:!0,uniforms:{map:{value:void 0},mouth:{value:void 0},leftEye:{value:void 0},rightEye:{value:void 0},leftIris:{value:void 0},rightIris:{value:void 0}}})}}]);
//# sourceMappingURL=6.1de279d9.chunk.js.map