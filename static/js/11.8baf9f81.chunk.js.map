{"version":3,"sources":["pages/chapters/chapter2/part1/StaticBackground.tsx","pages/covers/Cover2.tsx"],"names":["StaticBackground","memo","ref","useRef","uniforms","useMemo","u_time","value","viewport","useThree","useFrame","context","current","material","clock","getElapsedTime","position","scale","width","height","fragmentShader","vertexShader","Cover2","useEffect","store","setState","isCameraEnabled","style","top","transform","orthographic"],"mappings":"+FAAA,6DAIaA,EAAmBC,gBAAK,WACnC,IAAMC,EAAMC,iBAAgD,MACtDC,EAAWC,mBACf,iBAAO,CACLC,OAAQ,CAAEC,MAAO,OAEnB,IAGMC,EAAaC,cAAbD,SAOR,OALAE,aAAS,SAACC,GACHT,EAAIU,UACTV,EAAIU,QAAQC,SAAST,SAASE,OAAQC,MACH,GAAjCI,EAAQG,MAAMC,qBAGhB,uBACEb,IAAKA,EACLc,SAAU,CAAC,GAAM,EAAK,GACtBC,MAAO,CAACT,EAASU,MAAOV,EAASW,OAAQ,GAH3C,UAKE,wCACA,gCACEf,SAAUA,EACVgB,eAAgBA,EAChBC,aAAcA,UAKhBD,EAAc,i4BAwCdC,EAAY,sV,iCC3ElB,0FAKe,SAASC,IAKtB,OAJAC,qBAAU,WACRC,IAAMC,SAAS,CAAEC,iBAAiB,MACjC,IAGD,cAAC,IAAD,CACEC,MAAO,CACLX,SAAU,WACVE,MAAO,OACPC,OAAQ,OACRS,IAAK,MACLC,UAAW,oBAEbC,cAAc,EARhB,SAUE,cAAC,IAAD","file":"static/js/11.8baf9f81.chunk.js","sourcesContent":["import { useFrame, useThree } from \"@react-three/fiber\";\nimport { memo, useMemo, useRef } from \"react\";\nimport { BufferGeometry, Mesh, RawShaderMaterial } from \"three\";\n\nexport const StaticBackground = memo(() => {\n  const ref = useRef<Mesh<BufferGeometry, RawShaderMaterial>>(null);\n  const uniforms = useMemo(\n    () => ({\n      u_time: { value: 0.4 },\n    }),\n    []\n  );\n\n  const { viewport } = useThree();\n\n  useFrame((context) => {\n    if (!ref.current) return;\n    ref.current.material.uniforms.u_time!.value =\n      context.clock.getElapsedTime() * 0.2;\n  });\n  return (\n    <mesh\n      ref={ref}\n      position={[0.0, -0.0, 0.0]}\n      scale={[viewport.width, viewport.height, 1.0]}\n    >\n      <planeBufferGeometry />\n      <shaderMaterial\n        uniforms={uniforms}\n        fragmentShader={fragmentShader}\n        vertexShader={vertexShader}\n      />\n    </mesh>\n  );\n});\nconst fragmentShader = `\nvarying vec2 vUv;\nuniform float u_time;\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123 + u_time*10.0);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f*f*(3.0-2.0*f);\n    u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid main() {\n\n    vec2 pos = vec2(vUv*800.0);\n\n    float n1 = noise(pos + vec2(random(pos)));\n    float n2 =  noise(pos - vec2(random(pos)));\n    float n3 = noise(pos);\n\n    gl_FragColor = vec4(n1,n2,n3, 1.0);\n}\n`;\nconst vertexShader = `\nvarying vec2 vUv;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec3 transformed = vec3( position );\n  vUv = uv.xy;\n  vec4 mvPosition = vec4( transformed, 1.0 );\n  mvPosition = modelViewMatrix * mvPosition;\n  mvPosition = projectionMatrix * mvPosition;\n  gl_Position = vec4(mvPosition.x * 2.0, mvPosition.y * 2.0, 10.0, 10.0);\n}`;\n","import { Canvas } from \"@react-three/fiber\";\nimport React, { useEffect } from \"react\";\nimport { store } from \"../../store/store\";\nimport { StaticBackground } from \"../chapters/chapter2/part1/StaticBackground\";\n\nexport default function Cover2() {\n  useEffect(() => {\n    store.setState({ isCameraEnabled: true });\n  }, []);\n\n  return (\n    <Canvas\n      style={{\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        top: \"50%\",\n        transform: \"translateY(-50%)\",\n      }}\n      orthographic={false}\n    >\n      <StaticBackground></StaticBackground>\n    </Canvas>\n  );\n}\n"],"sourceRoot":""}